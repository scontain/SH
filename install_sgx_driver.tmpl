#!/bin/bash
: '
Access to this file is granted under the SCONE COMMERCIAL LICENSE V1.0 

Any use of this product using this file requires a commercial license from scontain UG, www.scontain.com.

Permission is also granted  to use the Program for a reasonably limited period of time  (but no longer than 1 month) 
for the purpose of evaluating its usefulness for a particular purpose.

THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING 
THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. 

THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED ON IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM INCLUDING BUT NOT LIMITED TO LOSS 
OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE 
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Copyright (C) 2017-2018 scontain.com
'

#
# - install patched sgx driver 


set -e

# OOT Patches
oot_metrics_patch_content=$(cat << 'METRICS_PATCH_EOF'
${OOT_METRICS_PATCH_CONTENT}
METRICS_PATCH_EOF
)
oot_metrics_patch_version=${OOT_METRICS_PATCH_VERSION}

oot_page0_patch_content=$(cat << 'PAGE0_PATCH_EOF'
${OOT_PAGE0_PATCH_CONTENT}
PAGE0_PATCH_EOF
)
oot_page0_patch_version=${OOT_PAGE0_PATCH_VERSION}

oot_version_patch_content=$(cat << 'VERSION_PATCH_EOF'
${OOT_VERSION_PATCH_CONTENT}
VERSION_PATCH_EOF
)

oot_dkms_patch_content=$(cat << 'DKMS_PATCH_EOF'
${OOT_DKMS_PATCH_CONTENT}
DKMS_PATCH_EOF
)

# DCAP Patches
dcap_metrics_patch_content=$(cat << 'METRICS_PATCH_EOF'
${DCAP_METRICS_PATCH_CONTENT}
METRICS_PATCH_EOF
)
dcap_metrics_patch_version=${DCAP_METRICS_PATCH_VERSION}

dcap_version_patch_content=$(cat << 'VERSION_PATCH_EOF'
${DCAP_VERSION_PATCH_CONTENT}
VERSION_PATCH_EOF
)

# OOT & DCAP Commits
oot_driver_commit="${OOT_COMMIT_SHA}"
dcap_driver_commit="${DCAP_COMMIT_SHA}"

# print the right color for each level
#
# Arguments:
# 1:  level

function msg_color {
    priority=$1
    if [[ $priority == "fatal" ]] ; then
        echo -e "\033[31m"
    elif [[ $priority == "error" ]] ; then
        echo -e "\033[34m"
    elif [[ $priority == "warning" ]] ; then
        echo -e "\033[35m"
    elif [[ $priority == "info" ]] ; then
        echo -e "\033[36m"
    elif [[ $priority == "debug" ]] ; then
        echo -e "\033[37m"
    elif [[ $priority == "default" ]] ; then
        echo -e "\033[00m"
    else
        echo -e "\033[32m";
    fi
}

function no_error_message {
    exit $? 
}

function issue_error_exit_message {
    errcode=$?
    trap no_error_message EXIT
    if [[ $errcode != 0 ]] ; then
        msg_color "fatal"
        echo -e "ERROR: installation of SGX driver failed (script=install_sgx_driver.sh, Line: ${BASH_LINENO[0]}, ${BASH_LINENO[1]})"
        msg_color "default"
    else
        msg_color "OK"
        echo "OK"
        msg_color "default"
    fi
    exit $errcode
}
trap issue_error_exit_message EXIT

function verbose
{
    echo $@
}

function log_error
{
    msg_color "error"
    echo $@
    msg_color "default"
    exit 1
}

function load_module {
    local mod_name=$1

    msg_color "warning"

    (sudo lsmod | grep $mod_name > /dev/null) && (sudo rmmod $mod_name 2> /dev/null || echo "WARNING: Unable to unload currently loaded '$mod_name' module. Please, reload '$mod_name' manually to changes take effect.")

    sudo modprobe $mod_name 2> /dev/null || echo "WARNING: Unable to load '$mod_name' module. Please, check if SGX is available on your system and enabled on BIOS."

    msg_color "default"
}

function check_oot_driver {
    if [[ ! -e /sys/module/isgx/version ]] ; then
        oot_driver_found=false
    else 
        oot_driver_found=true
        verbose "SGX-driver already installed."
        if [[ ! -e /dev/isgx ]] ; then
            log_error "SGX driver is installed but no SGX device - SGX not enabled?"
        fi
    fi
}

function check_dcap_driver {
    if [[ ! -e /sys/module/intel_sgx/version ]] ; then
        dcap_driver_found=false
    else 
        dcap_driver_found=true
        verbose "DCAP SGX-driver already installed."
        if [[ ! -e /dev/sgx ]] ; then
            log_error "DCAP SGX driver is installed but no SGX device - SGX not enabled?"
        fi
    fi
}

function check_driver {
    check_oot_driver
    check_dcap_driver

    if [[ $oot_driver_found == false && $dcap_driver_found == false ]]; then
        install_driver=true
    else
        install_driver=false
    fi
}

function install_common_dependencies {
    msg_color "info"
    echo "INFO: Installing dependencies... "
    msg_color "default"
    
    sudo apt-get update > /dev/null && \
    sudo apt-get install -y build-essential git patch linux-headers-$(uname -r) > /dev/null

    msg_color "info"
    echo "INFO: Done!"
    msg_color "default"
}

function remove_dkms_driver {
    dkms_cmd=$(which dkms)
    if [ $? == "0" ]; then
        for installed_ver in $(sudo $dkms_cmd status $1 | cut -d',' -f2 | sed 's/ //g'); do
            sudo $dkms_cmd remove $1/$installed_ver --all
        done
    fi
}

function apply_oot_patches {
    if [[ $use_dkms == "1" ]]; then
        echo "Applying DKMS patch..."
        echo "$oot_dkms_patch_content" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p1
    fi
    if [[ $patch_version == "1" ]]; then
        echo "Applying version patch..."
        echo "$oot_version_patch_content" | sed "s/COMMIT_SHA1SUM/$oot_commit_sha/g" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p1
    fi
    if [[ $patch_metrics == "1" ]]; then
        echo "Applying metrics patch..."
	echo "$oot_metrics_patch_content" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p1
    fi
    if [[ $patch_page0 == "1" ]]; then
        echo "Applying page0 patch..."
	echo "$oot_page0_patch_content" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p1
    fi
#    if [[ $patch_performance == "1" ]]; then
#        echo "Applying performance patch..."
#    fi
}

function install_oot_sgx_driver {
    if [[ $install_driver == true || $force_install ]] ; then
        install_common_dependencies

        dir=$(mktemp -d)
        cd "$dir"
        git clone ${OOT_REPOSITORY} driver_source

        cd driver_source/

        if [ -z $install_latest ]; then
            oot_commit_sha=$oot_driver_commit
            git checkout $oot_commit_sha
        else
            git checkout master
            oot_commit_sha="$(git rev-parse HEAD)"
        fi

        remove_dkms_driver isgx

        apply_oot_patches

        if [[ -f "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx/isgx.ko" ]]; then
            msg_color "info"
            echo "INFO: Removing \"/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx/isgx.ko\" ... "
            sudo rm -rf "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx/isgx.ko"
            msg_color "default"
        fi

        if [[ $use_dkms == "1" ]]; then
            msg_color "info"
            echo -n "INFO: Installing DKMS... "

            sudo apt-get install -y dkms > /dev/null

            echo "Done!"

            msg_color "default"

            driver_ver=$(cat dkms.conf | grep PACKAGE_VERSION | cut -d'=' -f2 | sed 's/"//g')

            if [[ ${#driver_ver} == 0 ]]; then
                log_error "Unable to detect OOT driver version!"
            fi

            sudo rm -rf /usr/src/isgx-$driver_ver
            sudo mkdir -p /usr/src/isgx-$driver_ver

            sudo cp -rf * /usr/src/isgx-$driver_ver/

            sudo dkms add -m isgx -v $driver_ver --force
            sudo dkms build -m isgx -v $driver_ver --force
            sudo dkms install -m isgx -v $driver_ver --force
        else
            make
            sudo mkdir -p "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx"
            sudo cp -f isgx.ko "/lib/modules/"`uname -r`"/kernel/drivers/intel/sgx"
        fi

        sudo sh -c "cat /etc/modules | grep -Fxq isgx || echo isgx >> /etc/modules"
        sudo /sbin/depmod -a

        load_module isgx

        cd "$dir"/..
        rm -rf "$dir"
    fi
}

function apply_dcap_patches {
    if [[ $patch_version == "1" ]]; then
        echo "Applying version patch..."
        echo "$dcap_version_patch_content" | sed "s/COMMIT_SHA1SUM/$dcap_commit_sha/g" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p3
    fi    
    if [[ $patch_metrics == "1" ]]; then
        echo "Applying metrics patch..."
	echo "$dcap_metrics_patch_content" | sed 's/\\@!-tbs-!@$/\\/g' | patch -p3
    fi
    if [[ $patch_page0 == "1" ]]; then
        msg_color "warning"
        verbose "WARNING: page0 patch is not available for DCAP installation"
        msg_color "default"
    fi
#    if [[ $patch_performance == "1" ]]; then
#        echo "Applying performance patch..."
#    fi
}

function install_dcap_sgx_driver {
    if [[ $install_driver == true || $force_install ]] ; then
        install_common_dependencies

        msg_color "info"
        echo -n "INFO: Installing DKMS... "

        sudo apt-get install -y dkms > /dev/null

        echo "Done!"

        msg_color "default"

        dir=$(mktemp -d)
        cd "$dir"
        git clone ${DCAP_REPOSITORY} driver_source

        cd driver_source/driver/linux

        if [ -z $install_latest ]; then
            dcap_commit_sha=$dcap_driver_commit
            git checkout $dcap_commit_sha
        else
            git checkout master
            dcap_commit_sha="$(git rev-parse HEAD)"
        fi

        apply_dcap_patches

        driver_ver=$(cat dkms.conf | grep PACKAGE_VERSION | cut -d'=' -f2 | sed 's/"//g')

        if [[ ${#driver_ver} == 0 ]]; then
            log_error "Unable to detect DCAP driver version!"
        fi

        sudo rm -rf /usr/src/sgx-$driver_ver
        sudo mkdir -p /usr/src/sgx-$driver_ver

        sudo cp -rf * /usr/src/sgx-$driver_ver/

        remove_dkms_driver sgx
        sudo dkms add -m sgx -v $driver_ver --force
        sudo dkms build -m sgx -v $driver_ver --force
        sudo dkms install -m sgx -v $driver_ver --force

        sudo cp 10-sgx.rules /etc/udev/rules.d
        sudo groupadd -f sgx_prv
        sudo udevadm trigger

        sudo sh -c "cat /etc/modules | grep -Fxq intel_sgx || echo intel_sgx >> /etc/modules"

        sudo /sbin/depmod -a

        load_module intel_sgx

        cd "$dir"/..
        rm -rf "$dir"
    fi
}

function install_sgx_driver {
    if [[ $install_dcap == "1" ]]; then
        install_dcap_sgx_driver
    else
        install_oot_sgx_driver
    fi
}

function check_commit {
    local driver_version=$1
    local driver_commit=$2

    echo -e "Driver commit: $driver_commit"

    echo -n "Driver status: [ Checking for a newer version. Please wait... ]"

    dir=$(mktemp -d)
    cd "$dir"

    if [[ $driver_version == "DCAP" ]]; then
        git clone ${DCAP_REPOSITORY} driver_source 2> /dev/null
    else
        git clone ${OOT_REPOSITORY} driver_source 2> /dev/null
    fi
    cd driver_source/
    
    local current_commit="$(git rev-parse HEAD)"

    if [[ $current_commit == $driver_commit ]]; then
        echo -e "\e[0K\rDriver status: Up to date                                      "
    else
        echo -e "\e[0K\rDriver status: Outdated - $(($(git rev-list --count $driver_commit..$current_commit) - 1)) new commit(s) available            "
        update_needed=true
    fi

    cd "$dir"/..
    rm -rf "$dir"
}

# first argument: driver_type [OOT or DCAP]
function check_dkms {
    local driver_version=$1
    
    echo -n "Use DKMS: "

    dkms_cmd=$(which dkms)
    if [ $? != "0" ]; then
        echo "No"
    else
        if [[ $driver_version == "OOT" ]]; then
            (($dkms_cmd status isgx | grep installed > /dev/null) && echo "Yes") || echo "No"
        else # DCAP always use DKMS
            echo "Yes"
        fi
    fi
}

# first argument: driver_type [OOT or DCAP]
function check_patches {
    local driver_version=$1

    if [[ $metrics_ver != "0" ]]; then
        echo -n "Patch 'metrics' version: $metrics_ver "

        if [[ $driver_version == "DCAP" ]]; then
            if [[ $metrics_ver == $dcap_metrics_patch_version ]]; then
                echo "(Up to date)"
            else
                echo "(Outdated - $(($dcap_metrics_patch_version - $metrics_ver)) newer version(s) available)"
                update_needed=true
            fi
        else
            if [[ $metrics_ver == $oot_metrics_patch_version ]]; then
                echo "(Up to date)"
            else
                echo "(Outdated - $(($oot_metrics_patch_version - $metrics_ver)) newer version(s) available)"
                update_needed=true
            fi
        fi
    else
        if [[ $patch_metrics == "1" ]]; then
            echo "Patch 'metrics' not found!"
            update_needed=true
        fi
    fi

    if [[ $page0_ver != "0" ]]; then
        echo -n "Patch 'page0' version  : $page0_ver "

        if [[ $page0_ver == $oot_page0_patch_version ]]; then
            echo "(Up to date)"
        else
            echo "(Outdated - $(($oot_page0_patch_version - $page0_ver)) newer version(s) available)"
            update_needed=true
        fi
    else
        if [[ $patch_page0 == "1" && $driver_version == "OOT" ]]; then
            echo "Patch 'page0' not found!"
            update_needed=true
        fi
    fi
}

function describe {
    driver_type=$1
    module_path=$2

    update_needed=false

    echo -e "Getting SGX Driver information:\n"
    echo "$driver_type driver detected."
    echo -e "Version: $(cat $module_path/version)\n"

    if [[ ! -e "$module_path/parameters/commit" ]]; then
        msg_color "error"
        echo "FAIL: Unable to detect 'version' patch! This patch is required for running this command."
        msg_color "default"

        echo -n "To install the driver with 'version' patch, run: ./install_sgx_driver.sh install -p version "

        if [[ $driver_type == "DCAP" ]]; then
            echo -n "--dcap "
        fi

        echo "--force"
        
        exit 1
    else
        driver_commit=$(cat "$module_path/parameters/commit")
    fi

    metrics_ver=$(cat $module_path/parameters/patch_metrics)
    page0_ver=$(cat $module_path/parameters/patch_page0)

    echo -n "Detected patches: version "

    if [[ $metrics_ver != "0" ]]; then # check if a metric is exposed
        echo -n "metrics "
        metrics_ver=$(cat $module_path/parameters/patch_metrics)
    fi

    if [[ $page0_ver != "0" ]]; then # check if a metric is exposed
        echo -n "page0 "
        page0_ver=$(cat $module_path/parameters/patch_page0)
    fi

    echo -ne "\n\n"

    check_dkms $driver_type

    echo
 
    check_commit $driver_type $driver_commit

    echo

    check_patches $driver_type 

    if [[ $update_needed == true ]]; then
        msg_color "warning"
        echo "WARNING: Update is needed!"
        msg_color "default"

        exit 1
    fi

    exit 0
}

function show_help {
    echo -e \
"Usage: install_sgx_driver.sh [COMMAND] [OPTIONS]...
Helper script to install Intel SGX driver.\n
The script supports the following commands:
  check                checks the current SGX driver status
                       (requires 'version' patch)
  install              installs the SGX driver

The following options are supported by 'install' command:
  -d, --dcap           install DCAP driver

  -p, --patch=[PATCH]  apply patches to the SGX driver. The valid values for PATCH
                       are: 'version', 'metrics', 'page0'.
      -p version       installs the version patch (recommended)
      -p metrics       installs the metrics patch
      -p page0         installs the page0 patch (not available for DCAP)

  -k, --dkms           installs the driver with DKMS (default for DCAP)

  -l, --latest         installs the latest upstream driver (not recommended)

  -f, --force          replaces existing SGX driver, if installed

The following options are supported by 'check' command:
  -p, --patch=[PATCH]  check the status of patch on current installed driver.
                       The valid values for PATCH are: 'metrics', 'page0'.
      -p metrics       check the status of 'metrics' patch
      -p page0         check the status of 'page0' patch (not available for DCAP)

Note: In case of absence or outdated driver, or absence or outdated patch, this command
will return error.

The following options are supported by both commands:
  -h, --help           display this help and exit


Usage example 1: to install the SGX driver with 'metrics' and 'page0' patches, run:

./install_sgx_driver.sh install -p metrics -p page0

Usage example 2: to check the status of driver installation and 'metrics' patch

./install_sgx_driver.sh check -p metrics

"

#     -p performance  installs the performance patch - requires access to a deployment key

    exit 0
}

function enable_patch {
    case "$1" in
        version)
        patch_version=1
        ;;

        metrics)
        patch_metrics=1
        ;;

        page0)
        patch_page0=1
        ;;

        *)
        msg_color "error"
        echo "ERROR: patch '$1' is not supported" >&2
        msg_color "default"
        exit 1
    esac
}

function parse_command {
    if [[ $1 != "install" &&\
          $1 != "check" ]]; then
          log_error "ERROR: '$1' command is not supported" >&2
    fi
}

function parse_args {
    PARAMS=""

    if [[ $# == 0 ]]; then
        show_help
    fi

    while (( "$#" )); do
    arg=$1
    case "$arg" in
        install)
        cmd_install=1
        shift
        ;;

        check)
        cmd_check=1
        shift
        ;;

        -k|--dkms)
        use_dkms=1
        shift
        ;;

        -d|--dcap)
        install_dcap=1
        shift
        ;;

        -h|--help)
        show_help
        shift
        ;;

        -f|--force)
        force_install=1
        shift
        ;;

        -l|--latest)
        msg_color "warning"
        echo "WARNING: the installation of latest upstream driver is not recommended."
        msg_color "default"
        install_latest=1
        shift
        ;;

        -p|--patch)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            if [[ $cmd_install != 1 && $cmd_check != 1 ]]; then
                msg_color "error"
                echo "ERROR: invalid arguments."
                msg_color "default"
                show_help
            fi
            enable_patch $2
            shift 2
        else
            msg_color "error"
            echo "ERROR: argument for '$1' is missing" >&2
            msg_color "default"
            exit 1
        fi
        ;;

        --patch=*)
        echo "${i#*=}"
        enable_patch "${1#*=}"
        shift
        ;;

        *) # preserve positional arguments
        msg_color "error"
        echo "ERROR: unsupported command '$1'" >&2
        msg_color "default"
        exit 1
        ;;
    esac
    done
    # set positional arguments in their proper place

    eval set -- "$PARAMS"
}

parse_args $@

parse_command $1

if [[ $cmd_install == "1" ]]; then
    if [[ -z $force_install ]]; then
        check_driver
    fi
    install_sgx_driver
    exit 0
fi

if [[ $cmd_check == "1" ]]; then
    check_driver >/dev/null

    if [[ $dcap_driver_found == true ]]; then
        describe DCAP /sys/module/intel_sgx
    fi
    
    if [[ $oot_driver_found == true ]]; then
        describe OOT /sys/module/isgx
    fi

    log_error "FAIL: No SGX driver detected!"
fi

show_help
