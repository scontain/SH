#!/usr/bin/env bash

: '
Access to this file is granted under the SCONE COMMERCIAL LICENSE V1.0

Any use of this product using this file requires a commercial license from scontain UG, www.scontain.com.

Permission is also granted  to use the Program for a reasonably limited period of time  (but no longer than 1 month)
for the purpose of evaluating its usefulness for a particular purpose.

THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING
THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED ON IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM INCLUDING BUT NOT LIMITED TO LOSS
OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Copyright (C) 2022 scontain.com
'

: '
The `operator_controller` script deploys, reconciles, or updates the SCONE operator

One should always use the latest version of this script. Via environment variables, one can customize the
script to install from different docker and git repos. The environment variables can be defined before calling
this script or by providing a config file $CONFIG_FILE (default is "operator_controller_config").

 - VERSION: it installs the "latest" version of the operator unless you define environment variable VERSION
 - REGISTRY: by default it uses registry "registry.scontain.com" to pull the operator unless you define env variable REGISTRY
 - MANIFESTS: by default we pull from  "https://raw.githubusercontent.com/scontain/manifests/main/$VERSION" - the manifests are VERSIONed
 - SCRIPTS: by default we pull from  "https://raw.githubusercontent.com/scontain/SH/main/$VERSION" - the scripts are VERSIONed
 - CHART: by default we pull the chart from  "https://raw.githubusercontent.com/scontain/operator/main/" 
    - the charts are VERSIONed: scone-operator-$VERSION.tgz
    - the images used in the CHART are versioned but we overwrite the image with $REGISTRY/scone.cloud/k8soperators:$VERSION
'

set -e

export K_PROVISION_VERSION="5.8.0-rc.3"
export RED='\e[31m'
export BLUE='\e[34m'
export ORANGE='\e[33m'
export NC='\e[0m' # No Color


function verbose () {
    if [[ $V -eq 1 ]]; then
        echo -e "${BLUE}- $@${NC}"  >/dev/stderr
    fi
}

function warning () {
    echo -e "${ORANGE}WARNING: $@${NC}"  >/dev/stderr
}

function error_exit() {
  trap '' EXIT
  echo -e "${RED}$1${NC}"   >/dev/stderr
  exit 1
}

# print an error message on an error exit
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
trap 'if [ $? -ne 0 ]; then echo -e "${RED}\"${last_command}\" command failed - exiting.${NC}" ; fi' EXIT

# CONFIG SECTION - some configuration options only be changed via environment variables (and not yet via command line flags)

if [[ "$CONFIG_FILE" == "" ]] ; then
    CONFIG_FILE="operator_controller_config"
else
    CONFIG_FILE "Using external CONFIG_FILE=$CONFIG_FILE"
fi


# NOTE: verbose will only show up if you execute with "V=1 ./operator_controller" 
source "$CONFIG_FILE" 2>/dev/null || verbose "Note: could not load config file \"$CONFIG_FILE\" - Ignoring."

#
# VERSION: all components 
#
#  latest   # default: install the latest version - right now this would be 5.8.0
#  5.8.0    # specific: version of the operator to install
#


if [[ "$VERSION" == "" ]] ; then
    export VERSION="$K_PROVISION_VERSION"
else
    warning "Using external VERSION=$VERSION"
fi

if [[ "$CERT_MANAGER" == "" ]] ; then
    CERT_MANAGER="https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml"
else
    warning "Using external CERT_MANAGER=$CERT_MANAGER"
fi

if [[ "$DEFAULT_NAMESPACE" == "" ]] ; then
    DEFAULT_NAMESPACE="scone-system"
else
    warning "Using external DEFAULT_NAMESPACE=$DEFAULT_NAMESPACE"
fi

if [[ "$REGISTRY" == "" ]] ; then
    export REGISTRY="registry.scontain.com"
else
    warning "Using external REGISTRY=$REGISTRY"
fi

# definitions related to secret operator (not recommended for production)

if [[ "$IMPS_HELM_CHART" == "" ]] ; then
    IMPS_HELM_CHART="banzaicloud-stable/imagepullsecrets"
else
    warning "Using external IMPS_HELM_CHART=$IMPS_HELM_CHART"
fi

if [[ "$IMPS_HELM_REPO" == "" ]] ; then
    IMPS_HELM_REPO="banzaicloud-stable https://kubernetes-charts.banzaicloud.com"
else
    warning "Using external IMPS_HELM_REPO=$IMPS_HELM_REPO"
fi

if [[ "$IMAGE_REPO" == "" ]] ; then
  export IMAGE_REPO="registry.scontain.com/scone.cloud"
else
  warning "Using external IMAGE_REPO=$IMAGE_REPO"
fi


function check_prerequisites() {
    exit_msg=""
    verbose "Checking that we have access to kubectl"
    if ! command -v kubectl &> /dev/null
    then
        exit_msg="Command 'kubectl' not found!"
        echo -e "${RED}${exit_msg}${NC}"
        echo -e "- ${ORANGE}Please install 'kubectl'- see https://kubernetes.io/docs/tasks/tools/${NC}"
    fi

    verbose "Checking that we have access to helm"
    if ! command -v helm &> /dev/null
    then
        exit_msg="Command 'helm' not found!"
        echo -e "${RED}${exit_msg}${NC}"
        echo -e "- ${ORANGE}Please install  'helm' - see https://helm.sh/docs/intro/install/${NC}"
    fi

    exit_msg=""
    verbose "Checking that we have access to jq"
    if ! command -v jq &> /dev/null
    then
        exit_msg="Command 'jq' not found!"
        echo -e "${RED}${exit_msg}${NC}"
        echo -e "- ${ORANGE}Please install 'jq'- see https://stedolan.github.io/jq/manual/${NC}"
    fi

    verbose "Checking that you have access to a Kubernetes cluster."
    if ! kubectl get pods &> /dev/null
    then
        echo -e "${RED}It seems that you do not have access to a Kubernetes cluster!${NC}"
        echo -e "- ${ORANGE}Please ensure that you have access to a Kubernetes cluster${NC}"
        exit_msg="No access to Kubernetes cluster!"
    fi


    verbose "Checking that we have local access to container images repo $IMAGE_REPO."

    Fixit=0
    export PULL_IMAGE="$IMAGE_REPO/k8soperators:$VERSION"
    docker pull "$PULL_IMAGE" 2>/dev/null || Fixit=2

    if [[ $Fixit != 0 ]] ; then
        warning "No access to images repo $IMAGE_REPO: cannot pull image $PULL_IMAGE"
        if [[ $PLUGIN == 0 || $ACCOUNT_INFO == 0 ]] ; then
            warning "set flags $deploy_plugin_flag $fix_flag to ensure that we fix locally pull container images"
            exit_msg="Cannot access repo $IMAGE_REPO."
        else
            echo "$REGISTRY_ACCESS_TOKEN" | docker login --username "$REGISTRY_USERNAME" --password-stdin "$IMAGE_REPO" || error_exit "Login into repo $IMAGE_REPO failed. Please check credentials!"
            docker pull "$PULL_IMAGE" >/dev/null || exit_msg="We cannot pull image $PULL_IMAGE - please check the credentials and the Image name!"
        fi
    fi

    if [[ "$exit_msg" != "" ]] ; then
        error_exit "$exit_msg"
    fi
}

# Functions to fix state

# USE default external namespace manifest -> which has $namespace

function check_namespace {
    NAMESPACE=$1
    verbose "  Checking namespace $NAMESPACE"

    if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>/dev/null
    then
        warning "  Namespace '$NAMESPACE' does not exist."
        if [[ $FIX == 1 ]] ; then
            namespace_manifest=".ns.yaml"
            verbose " Creating namespace '$NAMESPACE' - enabling automatic pull secret injection"
            verbose "   Creating manifest '$namespace_manifest'"
            cat >"$namespace_manifest"  <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: $NAMESPACE
  labels:
    name: scone-system
  annotations:
    scone-operator/inject-pull-secret:  "true"
    sconeapps/inject-pull-secret:  "true"
EOF

            kubectl apply -f "$namespace_manifest"
        fi
    else
        verbose "  Namespace '$NAMESPACE' already exist - no updating/fixing"
    fi
}


function check_secret {
    secret="$1"
    namespace="$2"

    if [[ $UPDATE == 1 &&  "$REGISTRY_USERNAME" != "" ]] ; then
        verbose "  Updating secret $secret"
        if [[ $SECRET_OPERATOR == 1 ]] ; then
            verbose "  Temporarily deleting automatic injection of $secret - to avoid that new secret is autmatically overwritten by old secret"
            kubectl delete ImagePullSecret $secret || verbose "Deleting of ImagePullSecret $secret failed - ignoring." 
        fi
        # deletion of ImagePullSecret also removes the secret .. we can create a new one
        kubectl create secret docker-registry --dry-run=client -o yaml "$secret" --docker-server="$REGISTRY" --docker-username="$REGISTRY_USERNAME"  --docker-password="$REGISTRY_ACCESS_TOKEN"  --docker-email="$REGISTRY_EMAIL" --namespace "$namespace" |  kubectl create -f - ; 
        # and we reenable the pushing of this image
        if [[ $SECRET_OPERATOR == 1 ]] ; then
            verbose "  Re-enabling injection of secret $secret"
            kubectl apply -f https://raw.githubusercontent.com/scontain/manifests/main/$VERSION/secrets_operator.yaml
        fi
    fi
    if ! kubectl get secret "$secret" -n "$namespace" > /dev/null 2>/dev/null
    then
        warning "Secret '$secret' does not exist in namespace '$namespace'."
        if [[ $FIX == 1 ]] ; then
            verbose "  Fixing/Updating secret $secret"
            if [[ "$REGISTRY_USERNAME" == "" ]] ; then
                warning "You need to specify $user_flag, $token_flag, and $email_flag!"
                warning "CANNOT fix the secret $secret"
            else
                kubectl create secret docker-registry "$secret" --docker-server="$REGISTRY" --docker-username="$REGISTRY_USERNAME"  --docker-password="$REGISTRY_ACCESS_TOKEN"  --docker-email="$REGISTRY_EMAIL" --namespace "$namespace"
            fi
        fi
    else
        verbose "  Secret '$secret' already exists in namespace '$namespace'."
    fi
}

function set_urls() {

    if [[ "$HELM_CHART" == "" ]] ; then
        HELM_CHART="https://raw.githubusercontent.com/scontain/operator/main/scone-operator-$VERSION.tgz"
    else
        warning "Using external HELM_CHART=$HELM_CHART"
    fi

    if [[ "$LAS_MANIFEST" == "" ]] ; then
        LAS_MANIFEST="https://raw.githubusercontent.com/scontain/manifests/main/$VERSION/las.yaml"
    else
        warning "Using external LAS_MANIFEST=$LAS_MANIFEST"
    fi

    if [[ "$SGXPLUGIN_MANIFEST" == "" ]] ; then
        SGXPLUGIN_MANIFEST="https://raw.githubusercontent.com/scontain/manifests/main/$VERSION/sgxplugin.yaml"
    else
        warning "Using external SGXPLUGIN_MANIFEST=$SGXPLUGIN_MANIFEST"
    fi

    if [[ "$KUBECTLPLUGIN" == "" ]] ; then
        KUBECTLPLUGIN="https://raw.githubusercontent.com/scontain/SH/master/$VERSION/kubectl-provision"
    else
        warning "Using external KUBECTLPLUGIN=$KUBECTLPLUGIN"
    fi


}


function wait_for_cmd_success() {
    local cmd
    cmd=$1
    echo -n "Waiting for $cmd to succeed... "
    timeout 31 bash -c "until $cmd &>/dev/null ; do sleep 0.5; done"
    echo "OK"
}

#
help_flag="--help"
ns_flag="--namespace"
ns_short_flag="-n"
fix_flag="--reconcile"
fix_short_flag="-r"
cr_flag="--create"
cr_short_flag="-c"
update_flag="--update"
update_short_flag="-u"
verbose_flag="--verbose"
verbose_short_flag="-v"
verbose=""
owner_flag="--owner-config"
owner_short_flag="-o"
verbose=""
debug_flag="--debug"
debug_short_flag="-d"
debug=""
user_flag="--username"
token_flag="--access-token"
email_flag="--email"
deploy_plugin_flag="--plugin"
plugin_flag="--plugin-path"
secret_operator_flag="--secret-operator"
version_flag="--set-version"
print_version_flag="--version"
only_controller_flag="--only-operator"

NAMESPACE="$DEFAULT_NAMESPACE"
repo="$APP_IMAGE_REPO"
create_ns=""

FIX=0  # Default only check - do not fix
UPDATE=0

SVC=""
NAME=""
REGISTRY_USERNAME=""
REGISTRY_ACCESS_TOKEN=""
REGISTRY_EMAIL=""
PLUGIN=0
SECRET_OPERATOR=1
ONLY_OPERATOR=0

# find directory on path where we are permitted to copy the plugin to

PLUGINBIN=`which kubectl-provision` || { PLUGINBIN="" ; for p in ${PATH//:/ } ; do
        if [[ -w "$p" ]] ; then
            PLUGINBIN="$p/kubectl-provision"
        fi
    done
}

usage ()
{
  echo ""
  echo "Usage:"
  echo "  operator_controller [OPTIONS]"
  echo ""
  echo "Objectives:"
  echo "  - Checks if the SCONE operator and all its dependencies are available."
  echo "  - Tries to fix any issues it discovers if flag '--fix' is set."
  echo "  - Tries to update all components in case flag '--update' is set (even if everything is ok)."
  echo "  - Creates a namespace for a service if flag --create NAMESPACE is set."
  echo ""
  echo ""
  echo "Options:"
  echo "    $fix_flag | $fix_short_flag"
  echo "                  Try to fix all warnings that we discover."
  echo "                  The default is to warn about potential issues only."
  echo "    $update_flag | $update_short_flag"
  echo "                  Try to update all dependencies of the SCONE operator."
  echo "                  independently if they need fixing."
  echo "    $ns_short_flag | $ns_flag NAMESPACE"
  echo "                  The Kubernetes namespace in which the SCONE operator should be deployed on the cluster."
  echo "                  Default value: \"$DEFAULT_NAMESPACE\""
  echo "    $cr_short_flag | $cr_flag NAMESPACE"
  echo "                  Create namespace \"NAMESPACE\" for provisioning SCONE CAS (or another service)."
  echo "    $user_flag REGISTRY_USERNAME"
  echo "                  To create/update/fix the pull secrets ('sconeapps' and 'scone-operator-pull'), "
  echo "                  one needs to specify the user name, access token, and email of the registry."
  echo "                  Signup for an account: https://sconedocs.github.io/registry/"
  echo "    $token_flag REGISTRY_ACCESS_TOKEN"
  echo "                  The access token of the pull secret."
  echo "    $email_flag REGISTRY_EMAIL"
  echo "                  The email address belonging to the pull secret."
  echo "    $deploy_plugin_flag"
  echo "                  Include the kubectl plugin in the reconciliation and updates."
  echo "    $plugin_flag PATH"
  echo "                  Path where we should write the kubectl plugin binary. The path must be writeable."
  echo "                  Default value: \"$PLUGINBIN\""
  echo "                  The prefix of the default value is the last path on your shell \$PATH that is writeable. "
  echo "                  If none is writeable and you set $deploy_plugin_flag, you must specify $plugin_flag PATH."
  echo "    $secret_operator_flag"
  echo "                  Check/Reconcile/Update the Secret Operator (used to inject Kubernetes Secrets into Kubernetes namespaces)"
  echo "    $only_controller_flag"
  echo "                  Only install the SCONE Operator (but no LAS, SGXPlugin, kubectl plugin)"
  echo "    $verbose_short_flag | $verbose_flag"
  echo "                  Enable verbose output"
  echo "    $debug_flag | debug_short_flag"
  echo "                  Create debug image instead of a production image"
  echo "    $version_flag VERSION"
  echo "                  Set the version of the helm chart"
  echo "    $help_flag"
  echo "                  Output this usage information and exit."
  echo ""
  echo "Default Configuration: "
  echo "  - CERT_MANAGER=$CERT_MANAGER"
  echo "  - DEFAULT_NAMESPACE=$DEFAULT_NAMESPACE"
  echo "  - HELM_CHART=$HELM_CHART"
  echo "  - LAS_MANIFEST=$LAS_MANIFEST"
  echo "  - SGXPLUGIN_MANIFEST=$SGXPLUGIN_MANIFEST"
  echo "  - REGISTRY=$REGISTRY"
  echo "  - KUBECTLPLUGIN=$KUBECTLPLUGIN"
  echo "  - IMPS_HELM_CHART=$IMPS_HELM_CHART"
  echo "  - IMPS_HELM_REPO=$IMPS_HELM_REPO"
  echo "  - VERSION=$VERSION"
  echo "You can overwrite the defaults by exporting these environment variables before executing this script."
}

##### Parsing arguments

while [[ "$#" -gt 0 ]]; do
  case $1 in
    ${ns_flag} | ${ns_short_flag})
      NAMESPACE="$2"
      if [ ! -n "${NAMESPACE}" ]; then
        usage
        error_exit "Error: The namespace '$NAMESPACE' is invalid."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${cr_flag} | ${cr_short_flag})
      create_ns="$2"
      if [ ! -n "${create_ns}" ]; then
        usage
        error_exit "Error: The namespace '$create_ns' is invalid."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${plugin_flag})
      PLUGINBIN="$2"
      if [ ! -n "${PLUGINBIN}" ]; then
        usage
        error_exit "Error: Please specify a valid kubectl plugin path ('$PLUGINBIN' is invalid)."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${user_flag})
      REGISTRY_USERNAME="$2"
      if [ ! -n "${REGISTRY_USERNAME}" ]; then
        usage
        error_exit "Error: Please specify a valid REGISTRY USERNAME ('$REGISTRY_USERNAME' is invalid)."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${token_flag})
      REGISTRY_ACCESS_TOKEN="$2"
      if [ ! -n "${REGISTRY_ACCESS_TOKEN}" ]; then
        usage
        error_exit "Error: Please specify a valid REGISTRY ACCESS TOKEN ('$REGISTRY_ACCESS_TOKEN' is invalid)."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${version_flag})
      export VERSION="$2"
      if [ ! -n "${VERSION}" ]; then
        usage
        error_exit "Error: Please specify a valid VERSION ('$VERSION' is invalid)."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${email_flag})
      REGISTRY_EMAIL="$2"
      if [ ! -n "${REGISTRY_EMAIL}" ]; then
        usage
        error_exit "Error: Please specify a valid REGISTRY ACCESS TOKEN ('$REGISTRY_EMAIL' is invalid)."
      fi
      shift # past argument
      shift || true # past value
      ;;
    ${fix_flag} | ${fix_short_flag})
      FIX=1
      shift # past argument
      ;;
    ${deploy_plugin_flag})
      PLUGIN=1
      shift # past argument
      ;;
    ${update_flag} | ${update_short_flag})
      UPDATE=1
      shift # past argument
      ;;
    $verbose_short_flag | $verbose_flag)
      V=1
      shift # past argument
      ;;
    ${debug_flag} | ${debug_short_flag})
      set -x
      shift # past argument
      ;;
    ${secret_operator_flag})
      SECRET_OPERATOR=1
      shift # past argument
      ;;
    ${only_controller_flag})
      ONLY_OPERATOR=1;
      shift # past argument
      ;;
    ${print_version_flag})
      echo "$VERSION"
      exit 0
      ;;
    ${help_flag})
      set_urls
      usage
      exit 0
      ;;
    *)
      usage
      error_exit "Error: Unknown parameter passed: $1";
      ;;
  esac
done

set_urls


if [[ $REGISTRY_USERNAME != "" || $REGISTRY_ACCESS_TOKEN != "" ||  $REGISTRY_EMAIL != "" ]] ; then
    if [[ $REGISTRY_USERNAME == "" || $REGISTRY_ACCESS_TOKEN == "" ||  $REGISTRY_EMAIL == "" ]] ; then
        error_exit "You need to specify flags $user_flag, $token_flag, $token_flag"
    fi
    export ACCOUNT_INFO=1
else
    export ACCOUNT_INFO=0
fi


if [[ $UPDATE == 1 ]] ; then
    verbose "Updating / fixing all components"
    FIX=1
fi

check_prerequisites

verbose "Checking cert-manager"

CM="0"

if [[ $UPDATE == 1 ]] ; then
    verbose "  Updating cert-manager (using manifest $CERT_MANAGER)"
    kubectl apply -f "$CERT_MANAGER"
fi

until [[ $CM != "0" ]]
do
    export CM=`kubectl get pods -A | grep cert-manager | grep Running | wc -l | sed 's/^[[:space:]]*//g'`
    if [[ $CM == "0" ]] ; then
        warning "cert-manager is not running - trying to start cert manager"
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml
        warning "waiting 5 seconds before checking again"
        sleep 5
    else
        verbose "  cert-manager is running (found '$CM' running pods)"
    fi
done

verbose "Checking that operator namespace '$NAMESPACE' exists"
check_namespace "$NAMESPACE"

if [[ "$create_ns" != "" ]] ; then
    verbose "Checking that service namespace '$create_ns' exists"
    check_namespace "$create_ns"
fi

if [[ $SECRET_OPERATOR == 1 ]] ; then
    verbose "Checking if the secret operator exists"

    SO=`helm list -A | grep scone-imps | wc -l | sed 's/^[[:space:]]*//g'`

    if [[ $UPDATE == 1 && $SO != "0" ]] ; then
        verbose "  Updating the Secret Operator"
        helm repo add --force-update $IMPS_HELM_REPO
        helm upgrade --install scone-imps $IMPS_HELM_CHART --namespace $NAMESPACE
    fi

    if [[ $SO == "0" ]] ; then
        warning "SECRETS operator not installed!"
        if [[ $FIX == 1 ]] ; then
            verbose "  Fixing the SECRETS Operator"
            helm repo add $IMPS_HELM_REPO
            helm install scone-imps $IMPS_HELM_CHART --namespace $NAMESPACE
        fi
    fi
    verbose "Ensuring that secrets 'sconeapps' and 'scone-operator-pull' are automatically available in all namespaces"
    kubectl apply -f https://raw.githubusercontent.com/scontain/manifests/main/$VERSION/secrets_operator.yaml
fi

check_secret "scone-operator-pull" "$NAMESPACE"
check_secret "sconeapps" "$NAMESPACE"

verbose "Checking SCONE Operator"
# SO=`helm list -A | grep scone-operator | wc -l | sed 's/^[[:space:]]*//g'`

INSTALLED_VERSION=$(helm list -o json --all-namespaces | jq -r '.[] | select(.chart | startswith("scone-operator-"))' | jq '(.chart |  ltrimstr("scone-operator-"))' | tr -d '"')

verbose "Installed version of the operator controller is '$INSTALLED_VERSION' and the desired version is '$VERSION'"
if [[ $UPDATE == 1 && "$INSTALLED_VERSION" != "$VERSION" ]] ; then
    verbose "  Updating the SCONE Operator: helm upgrade --install scone-operator $HELM_CHART --force --namespace $NAMESPACE  --version $VERSION --set image=$PULL_IMAGE"
    curl -LJ $HELM_CHART -o scone-operator.tgz
    tar -xzf scone-operator.tgz
    rm scone-operator.tgz
    helm upgrade --install scone-operator ./scone-operator --force --namespace $NAMESPACE  --version $VERSION --set image=$PULL_IMAGE
    export INSTALLED_VERSION="$VERSION"
fi

if [[ "$INSTALLED_VERSION" != "$VERSION" ]] ; then
    warning "Desired version of SCONE operator is NOT installed ($INSTALLED_VERSION != $VERSION)!"
    if [[ $FIX == 1 ]] ; then
        verbose "  Fixing the SCONE Operator"
        curl -LJ $HELM_CHART -o scone-operator.tgz
        tar -xzf scone-operator.tgz
        rm scone-operator.tgz
        helm upgrade --install scone-operator $HELM_CHART --namespace $NAMESPACE --version $VERSION  --set image=$PULL_IMAGE
    fi
fi

if ! kubectl describe crd sgxplugins > /dev/null 2>/dev/null
then
    warning "Custom Resource Definition 'sgxplugins' does not yet exist - waiting for it to be created by the operator"
    until kubectl get sgxplugin  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'sgxplugin' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi

if ! kubectl describe crd las > /dev/null 2>/dev/null
then
    warning "Custom Resource definition 'las' does not yet exist - waiting for it to be created by the operator"
    until kubectl get las  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'las' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi


if ! kubectl describe crd cas > /dev/null 2>/dev/null
then
    warning "Custom Resource Definition 'cas' does not exist."
    until kubectl get cas  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'cas' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi

if ! kubectl describe crd signedpolicies > /dev/null 2>/dev/null
then
    warning "Custom Resource Definition 'signedpolicies' does not exist."
    until kubectl get signedpolicies  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'signedpolicies' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi

if ! kubectl describe crd encryptedpolicies > /dev/null 2>/dev/null
then
    warning "Custom Resource Definition 'encryptedpolicies' does not exist."
    until kubectl get encryptedpolicies  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'encryptedpolicies' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi


if ! kubectl describe crd vaults > /dev/null 2>/dev/null
then
    warning "Custom Resource Definition 'vaults' does not exist."
    until kubectl get vaults  > /dev/null 2>/dev/null
    do
        warning "Custom Resource Definition 'vaults' does not yet exist. Waiting a little for the CRD to get ready."
        sleep 5
    done
fi


if [[ $ONLY_OPERATOR == 1 ]] ; then
    verbose "Only checking Operator - Done."
    exit 0
fi


verbose "Checking SGXPlugin"

if [[ $SGXPLUGIN_MANIFEST == https://* ]] ; then
    curl -fsSL "$SGXPLUGIN_MANIFEST"  -o ".sgxplugin-manifest.template" || error_exit "Failed to download the SGXPLUGIN manifest from $SGXPLUGIN_MANIFEST"
else
    cat "$SGXPLUGIN_MANIFEST" > ".sgxplugin-manifest.template" || error_exit "Failed to read local SGXPLUGIN manifest file $SGXPLUGIN_MANIFEST"
fi
envsubst < ".sgxplugin-manifest.template" > ".sgxplugin-manifest.yaml"


if ! kubectl get sgxplugin "sgxplugin" > /dev/null 2>/dev/null
then
    if [[ $FIX == 1 ]] ; then
        verbose "  Fixing by creating a sgxplugin resource using manifest '$SGXPLUGIN_MANIFEST'"
        wait_for_cmd_success "kubectl apply -f .sgxplugin-manifest.yaml"
    fi
else
    verbose "Custom Resource 'sgxplugin' does already exists"
    INSTALLED_VERSION=$(helm list -o json --all-namespaces | jq -r '.[] | select(.chart | startswith("sgxdevplugin-"))' | jq '(.chart |  ltrimstr("sgxdevplugin-"))' | tr -d '"')

    verbose "Installed version of the SGXPlugin is '$INSTALLED_VERSION' and the desired version is '$VERSION'"

    if [[ "$INSTALLED_VERSION" != "$VERSION" ]] ; then
        warning "Desired version of SCONE SGXPlugin is NOT installed!"
        if [[ $FIX == 1 ]] ; then
            verbose "  Fixing the SGXPlugin using $SGXPLUGIN_MANIFEST"
            kubectl apply -f ".sgxplugin-manifest.yaml"
        fi
    fi
fi


if ! kubectl get "las" "las" > /dev/null 2>/dev/null
then
    warning "Custom Resource 'las' does not yet exist."
    if [[ $FIX == 1 ]] ; then
        verbose "  Fixing by creating a LAS resource using manifest '$LAS_MANIFEST'"

        if [[ $LAS_MANIFEST == https://* ]] ; then
        curl -fsSL "$LAS_MANIFEST"  -o ".las-manifest.template" || error_exit "Failed to download the LAS manifest from $LAS_MANIFEST"
        else
        cat "$LAS_MANIFEST" > ".las-manifest.template" || error_exit "Failed to read local LAS manifest file $LAS_MANIFEST"
        fi

        envsubst < ".las-manifest.template" > ".las-manifest.yaml"

        kubectl apply -f ".las-manifest.yaml"
    fi
else
    verbose "Custom Resource 'las' already exists"
fi


verbose "Checking if the kubectl plugin exists"

Fixit=0
KVERSION=$(kubectl provision --version 2>/dev/null) || Fixit=2

if [[ $Fixit != 0 || "$VERSION" != "$KVERSION" ]] ; then
    if [[ $Fixit == 2 ]] ; then
        warning "SCONE kubectl plugin does not exist - must be deployed ($VERSION != $KVERSION)"
    else
        verbose "SCONE kubectl plugin must be updated"

    fi
    if [[ $FIX == 1 ]] ; then
        if [[ $PLUGIN == 0 ]] ; then
            warning "set flags $deploy_plugin_flag $fix_flag to reconcile the kubectl plugin"
        else
            if [[ "$PLUGINBIN" == ""  ]] ; then
                error_exit "cannot write to binary $PLUGINBIN: please specify writable path '$plugin_flag <PATH>'"
            else
                verbose "Storing kubectl plugin in directory $PLUGINBIN"
                verbose "  Fixing kubectl plugin - downloading $KUBECTLPLUGIN to file $PLUGINBIN"
                curl -fsSL "$KUBECTLPLUGIN"  -o "$PLUGINBIN" || error_exit "Failed to download and install kubectl plugin"
                chmod a+x "$PLUGINBIN"
            fi
        fi
    fi
else
    verbose "  SCONE kubectl plugin is already installed"
fi
